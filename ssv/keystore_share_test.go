// description:
// @author renshiwei
// Date: 2022/11/1 19:39

package ssv

import (
	"encoding/base64"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"github.com/duktig666/ssv-keys-go/common/cryptor"
	"github.com/duktig666/ssv-keys-go/eth1"
	"github.com/duktig666/ssv-keys-go/keystorev4"
	"github.com/herumi/bls-eth-go-binary/bls"
	"github.com/stretchr/testify/require"
	"math/big"
	"strings"
	"testing"
)

var operatorPubkeys = []string{
	"LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBOXFqdFRtVnhybE5tWEF4cjFWcTIKNUVQWWowNGpGSUdXUytZV3BKK2ozeTlaaWR5aU8xb0N4czUxdUJLSitFUUEzelZTaStCYWEva2QybVdkV3MydApreHZSMzBEWWU5RmpnR21TSW1PMWk3MnlQOUtPVXhXZGhqR2tpeXJId0FHZy9Jd25yZGMvaC9UQi91c0JUOEVoCktXZVoxdEZwbTY4bXhPOXZNQVJNRVg5U3BCeDNkRjV0Z2ttU2RrUWtDK3QzSEF2RjNQR2hrNUQ2cXFjMDA1NkEKcTFuQXk0ZlhGaURjUjU0OEVUZ1ppVWtTTjAwMnZpRXF0eHB6SVFyNnowZWJ2T3BSVFhMRmNzOS9xdlFSU1hDTApDQU9IeUpMQzFjeVRNRmRCczgzM1k2ZXZ0QkpqMVhCM2NoTS9xUUdGdWhiYUVjeFVyY2lsWjZUVXcyS0QxbVJNCmJRSURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K",
	"LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBK2dNbWtSek5pTnJaOGZnbGs5cXgKSkpXbU80WG5mVkE0VFRSWDFCaUlMVm5ZWkltT0NIbHZwRE0rdU94OWQwb2xWa1N4NWZraVhlNVN5clBtREdZNApoanR5VUR1dFh6SEhMbmt2WG5aQjdZdmV0WkRqRk5sWHJwR0g1MjVBT0pLT285dDNnM3YyUVRLMEVVR01OZFJ3CjFZYUZOeVRQSk0zd1hCTFl2d01iR1FDRGFpN2M2eUswZVBrUnlCWVZxK2puT1FyTHI0alQrNE5JN3k4NVNQMEMKWXM3MDhuTk5TMTdLVExFVWdoTktvckdGUXBRNEFFQUxGMjZpZmRpVlQ4MXFEOWJUVjdCVFFwaU0rcHNQbUFCRwpIYXdpZWNqakhnV25KOENHQWZzd3RHamg0T3U1R0JNS2JRUm5heWtUZElJMmZFZHoxWWUrU3d1L1R2blBweFZiCllRSURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K",
	"LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBckxwZXlQcDBrRVJIZGVQbnFxMVAKUXdEZGFBa0E0akRpeU5hMXpMQ1dpb04wQXdRL21xeUxMWWJjcjd6SXFBa3g4ZlZ0aWN5cUVoOWFyTXFlUTZtWgp6OFpZbmlSZXdXZkwrcGhPZ1RoVGhWdHNxNEtlOFFiQ1hsRWovWWplZkRUb0xuT2dhMy9HK2NPMmNraG8vSmZCCnNzSmZmcGxhT2w5OVhhMlcvd1kwWFpkeWswYnZmdTdWT2xlUTZtUUhkVHdOS2kzcGJFcndJTTZEYmhMaHN2S1MKVnJGeVhsNmlaSS9KNmEvNDArMlVhbExSK0haUnVic3ozSENaZ2hHa1NYdG12MFlyaUU0aUZya1BSOGQybGtZRwpXekxwaEZQVVRBL3VFM0lqOFY2M3o4YnpVTS9EdGdPNEFOdG1OZFIyMWNRS3JEdisvQldyRm1hTFltQnZjQnpICjhRSURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K",
	"LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMkpkajl0MkVmRTlVWFEzR1ROM0UKT0N5RHg5SnRRMkUvd21jdFc4VC9xT3pCUE40RmdjblArVXFhcEpqYWNCbjFaQk9QeFh0MEZGakowQ0JkQzY0cgpvSE5LQXl3cGxEN2gwbW5nSUV5UGx5N1RjL2NJU2hudVh4WlBobTJLVms0NEJWZ1lodHBHYlpmSkY2TkRTZGd1CklqQ25RU3VDa0VzWUo3Y0YxZHFveVd5RGpSL2M5RWVkUnZuVElKNmFQT21Kd3NRZ0pzVG1qeW16WVNEZjlXZUEKL1NHWCtxczBNQ0xmcTZjWlUxTXZEZkNEbmxBb1NTNENUQzVYWXAyUmpvak9hWHExb0ZmUmQrc1RZY0pndTFlbgo3TXRadjBoN01pU1BPK3I0cDZsbU5PSHo4OXkxVjVGWHBsOCszTG9HT09Od01zRTJWTVgxMmY1b3d2Ly94OVJFCmdRSURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K",
}

var operatorSKs = []string{
	"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBOXFqdFRtVnhybE5tWEF4cjFWcTI1RVBZajA0akZJR1dTK1lXcEorajN5OVppZHlpCk8xb0N4czUxdUJLSitFUUEzelZTaStCYWEva2QybVdkV3MydGt4dlIzMERZZTlGamdHbVNJbU8xaTcyeVA5S08KVXhXZGhqR2tpeXJId0FHZy9Jd25yZGMvaC9UQi91c0JUOEVoS1dlWjF0RnBtNjhteE85dk1BUk1FWDlTcEJ4MwpkRjV0Z2ttU2RrUWtDK3QzSEF2RjNQR2hrNUQ2cXFjMDA1NkFxMW5BeTRmWEZpRGNSNTQ4RVRnWmlVa1NOMDAyCnZpRXF0eHB6SVFyNnowZWJ2T3BSVFhMRmNzOS9xdlFSU1hDTENBT0h5SkxDMWN5VE1GZEJzODMzWTZldnRCSmoKMVhCM2NoTS9xUUdGdWhiYUVjeFVyY2lsWjZUVXcyS0QxbVJNYlFJREFRQUJBb0lCQUFqVVh6cFJNMUtVTmJQUgoxZ0piTHZUWTRPV3dYRjBkam0zRkhNWmoySS9pdUFmUldCVmIwWUdnWG1KcWQzbmxwVXBZTkU1Qmg3c1p2ZEhWCmxWNXN3bXZqc1EyVzJxa0VBOVhTOGFJOWc0QXZHRFJrcXllYVBIdFRSNXFidTI3S0lDTXFPVGxsM1NaV3dxTUgKY3BLU1RVZVlKOCtpeTI4QlJCZ0VvaXhMMnhVOU1ZL1lVZDZsNzBoME5aWDdzYmlKOE1OTGNaNVg3SDFYSHlLRQowblpGVWZ6bG5ibSt4T0NwazFpV20rZHJld0tQYWNzb3pQNnBqaGdxaTlWN081cFBmYkpPUWNwUDhHNUhLNTNsCitvSHFlejV4YXRPQ1h0MjgrZVV5cm5HeE1mUjlTSlBncEE1ZFlXREYzQ3RjMHREeGVGeUQ0NzhyK1MwUS83SUYKbi9YNWZJRUNnWUVBLzZLNG5JT2o4S2xiV0Z3N2tORWVNaXhpZ3FacnVGVkt2TEp3ODVhSUVBUlFuQnZZUFp4VAovQTNub21MOFhVOS9JOEcwR3pGN0tteVpXM0JQei80STJxd3B2dFZ0WlVOT3Q1TmtBc05BR1ZTb2FIWFdlY2NHCmVXYmpQbVVjTTMyTXU2TllVMGx1NTBuQUhJNHJPTHRGWG1SZVFwWTdLOWYrOVRnU3pSZzlGbjBDZ1lFQTl3THUKUU1Fc00wRytOWDlnajBhZnU0YXAwVkFiaVJQNlBjcGlxMmR6WWptRlFaQnNULzFhRkNaTFk0MlFYZkNoaEl4eQo1ZXVHUmZEMFUwU1ZndEhIejMzaEZIcmpQNlMrVm4wWEd2bkFJK2VwalRlSzY5c1JOM0wzTjIxSnM1Q2pCV1h0ClcvTVVKRlFPZ1hpUzJBcktXMkVFYVgzd2hRTzhEUXUyZ2pDU3dMRUNnWUVBNUlxMm4zNzFMekJKc1Bwc2FuRDYKblFLZlk0eWpXMTR0ZmZ2T0RZZ3p4cFlFOXp2Um5HdEpqbHRrRGdLTyttRWJHbjJQcG93YlAvZHRONWwyVVU0YwozbHJ5eTJDRjkvVXZ4K0ZtbFMyMy9hMTVEa0xqWjJYdXZOU21MdDg0VWpSWmdGdHRtTEJiRFQ0YkdheGtxY2lMCklQTjhiZTFmb3pmdEFaQ0xCbjg0QmdVQ2dZRUEyelFYbVJHVWx2d2R2ejRGdzhBcDJuSDcyOHVhVkFDTmp5NCsKZDl1N2NveVhMQUx0aStMS2dKMG5RL2FLQ2tPVUlwdTlEenIvRXF4dE5rUGo1bzhpSVltVkorYVNLcFdaY0FsYwphc3orYlI2VndjTnJuamp2UTJUYjdLMG92Wmg2Z3p6YjhrQjZQRzczM0gvUzJMUml0Y3NYN2tJY0l2NlljSDlYCmZKdDhjRkVDZ1lCOE9mL0ZPUHcyQUZRT3VMVlVHcGYveGphSVdJcmpjU2tzRW5LS24vc3l6RWc1RmMyek8xYjYKNHllT3JqWVhSUjBJKzFSYnNXdFhudHdjenF1bm9UZEZHZHZkOUJjdWFwQ3JWMlZESDdpYU4yYTNNVFUySzRXcgpyOEpBeEJnWkQ0czlvNkZ1WElVV29VMFdUdyt5RzRyYjhEMHR3b1ZiOGVsMXJOMzZXMm1LT0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
	"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBK2dNbWtSek5pTnJaOGZnbGs5cXhKSldtTzRYbmZWQTRUVFJYMUJpSUxWbllaSW1PCkNIbHZwRE0rdU94OWQwb2xWa1N4NWZraVhlNVN5clBtREdZNGhqdHlVRHV0WHpISExua3ZYblpCN1l2ZXRaRGoKRk5sWHJwR0g1MjVBT0pLT285dDNnM3YyUVRLMEVVR01OZFJ3MVlhRk55VFBKTTN3WEJMWXZ3TWJHUUNEYWk3Ywo2eUswZVBrUnlCWVZxK2puT1FyTHI0alQrNE5JN3k4NVNQMENZczcwOG5OTlMxN0tUTEVVZ2hOS29yR0ZRcFE0CkFFQUxGMjZpZmRpVlQ4MXFEOWJUVjdCVFFwaU0rcHNQbUFCR0hhd2llY2pqSGdXbko4Q0dBZnN3dEdqaDRPdTUKR0JNS2JRUm5heWtUZElJMmZFZHoxWWUrU3d1L1R2blBweFZiWVFJREFRQUJBb0lCQVFERmp2WEwxM0hHd2dGVQp4bHlUVUUySWRrU01ab3g5Sm9YRzVDUys4Yit4N253alBkc2hjU3c2R1ZCbittQk9naVdzM00yaXgxSlQzVDVJCjlRMUZJUVZyZE5Bby9HOU1lTjVISi9XNWRFTTJmYjgzeEV6Y3JiNHVzTXN1b3AxVzF1Q21OSWRsTy9Ca3ByZEoKcDMwdkVEYzFVMzR6REFBdnVoaEQrWlNTbzlhbTBvUXlGZThZYmVIci8wME96REZ6T2RFM3BhWEJuVE5BN3Y1ZgoxMnVtQThWL1JmZ2VlU3BLYUNZMFcrMXlnMVJVdDA5cnJDbHR6eU1KTWNNQnliVG01aTdZYTU2QXJVdDBtVnEvCjFvQVNseW5JaktLWnQzOUF0R3lZemFrY3BHSHA1Tk9EQjYrcThhbDlEK3VnQ3JDL1pXbGdYWEFIYUJ3N29FMnMKYlVWSzVoc3RBb0dCQVB5YW9OOFB1T0xzaUxpZVVqbDVFTjVSNUZIMElmWThRUUZYUmhXbTBTejZIVk0zT0FlNwp3UXhQNTBwVUx6SThKYzg1VW1ZaThwT2psM2Nyd09PSjZjV3VuUjhvdzZWOE9lUDRXTHVuaG40Z1BJWi9Xc1BXCjZkeHNCVHdwM04vNWJ5N2ZoaE0wL3FmdHd6Vy84ZzlKL2FXcjYwWEc3dUllQUFiNkNPZkZORFVuQW9HQkFQMWYKbWo3SDZyK21QekpRSk5FN2RDNnV0b2dya2k5cVJhTzg0TDQxaU4xTzVIRTRaNjhJcmxWMzNJOStyNUY4c3RUMgpNVmtlY3FrMGwzYXR6L3V1djhVSVRERTM0MFZnbDdNU2psWS9XR1duWVdnSU02aFpxWmI0ZTlubXJ4ZTh4cXJUCk1ObU9kbzFYbmZlS1dhRm5LQ1Y1dzRtM2lObTBvalFLTkFOSVNKQTNBb0dCQUtxYktRSGUxWWwySmRWRElOZXUKVytVN3ZCQlo2Y0lyNmQraytUSFFiRUNMWU5qK1YzcHBwYlhTRmEyTzlCMWlvRXE0TlYzRVJyL09ZcE5iV3JpVApRZStBd3AvejRVZllnaVRsYTlDNkVjMEhxcmxRTkpaR2hjYVlzbVJ6QmJuRDl3TGFkdXhzQTM2WnlCbDZYVnRVCkp0c0pKU3NJYy9rR09CQitPUnVJaG4xTEFvR0FQdUhnUFI2T296dldTVjFjbGRVRWs2Vm14Y3JTZ0JRRzdva3MKMmVnZGJKZHMyTENnQXUvTG5JaWY0N2tVUjY1RUQ5aCtETmtpcWQzVWpXNjd4SUh0TkRCSUFKc1hPNXVxYXBYNwpYMnBmUFBOYW1HQVl1ZnB1dlhveityTm0xeVJSeGdtZUFSQjdXYjdhQkpxQWZpOUU1bkFlMkdvRmU4cDV5eUtSCklCTnJkdWNDZ1lCeDNZemc5b0pxb2dKQjBiRXdUN2dnSnBIeU13bFYzWXlRYmV3WlpwZU5sREwwT0FVSWhkemYKNGRqYnBZRkhOVUk2VGhDRjd1SlRWZnlXa2lIRkJ1UlJlMGVMaDd1UkNaS0NRUHN5ZXpJQ0Q0Z1ZCSXhVRDdCVwo5VWdUaFVrUHNMWFh2c0lpdEdqT01OdVpWenlsZWdzQ0VLREdjN0VBeGhwR1g4T3dSdXc1a1E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
	"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBckxwZXlQcDBrRVJIZGVQbnFxMVBRd0RkYUFrQTRqRGl5TmExekxDV2lvTjBBd1EvCm1xeUxMWWJjcjd6SXFBa3g4ZlZ0aWN5cUVoOWFyTXFlUTZtWno4WlluaVJld1dmTCtwaE9nVGhUaFZ0c3E0S2UKOFFiQ1hsRWovWWplZkRUb0xuT2dhMy9HK2NPMmNraG8vSmZCc3NKZmZwbGFPbDk5WGEyVy93WTBYWmR5azBidgpmdTdWT2xlUTZtUUhkVHdOS2kzcGJFcndJTTZEYmhMaHN2S1NWckZ5WGw2aVpJL0o2YS80MCsyVWFsTFIrSFpSCnVic3ozSENaZ2hHa1NYdG12MFlyaUU0aUZya1BSOGQybGtZR1d6THBoRlBVVEEvdUUzSWo4VjYzejhielVNL0QKdGdPNEFOdG1OZFIyMWNRS3JEdisvQldyRm1hTFltQnZjQnpIOFFJREFRQUJBb0lCQVFDYXJxUW5rN05EWndJZgozeU1lUStwUmRMclNhZzJ5Z2xqMXh1STBGb2dhTHpKN2FSaVVxYVJSOXc0M0N2Y2ZGR3ozNC9SZWpUeFkwbDlmCmttdzg1K3RvbUpYUHVYNXA4VXhJZEpFSlE2bjRLVEdlUG5HY0k1TjQ1MjAxcFphbzRMQjB1UE9Xa1cxZFN4bGUKS3Q1cUpuVStZcmNtSnFzWXoxN3p2M3NUa3pqZC9rT2taaWRNdm9McVNNSGgxYTV6cXFla09XRUpkMmVvVVAwSApHSGszeWI3ZTdNK2F6NjhtczJFM05BUlg5RG0zOXpvbm5POUc5bHJRZkQrTTNPb2xZU09NdkhKcVpBZWpibmVwCi9pQU5oRFFKVFE4SUtqcHI2RTB2RDBxR1RmR0Q0YzBnRXc1NmRjbUFBdEdIeEF5QVFleERxdXZVS0lGMVdJYWIKMzB6RVErVEpBb0dCQU5wbW90Q1cxTldXeHRjZXo2RmY1cjJUOHhubTFidlhhSVdVVW1ralNqVU4zb2t5S0lybgpYMEx6eWc5QVRJTENrOTVadStjR0dYcENiMHBiWUdlbW5IVVNTRkZZK3RJZkZ2eEs1UWpTUGt6clZobmZZNDY0Cm8xZzVrZ1VZT1pNSGoybUFMdWluaFJxU05KNFBXR2NSK3VKNDhUMVF4d0dJNXlZMXoxYzVaZW5QQW9HQkFNcDIKMW9LL0pPVm5LY1JIVm1PRFBWZEV4NlJuazY0bzBpYjA3L2grbmFxSDQ3N1dkWndrT001ekZvZzZWcXgrUXBXbQovQ0VicnFEa1lTOEIvM3duSnl4UEdPclBEQy9rYWdLZXRrS01zYWhERDZBMUo2eVJpV0wzeVkzSUtHWUFnNzYrCktNVW5PL0JwOXlYRFRqZUNWRWd2QU9LemxhODVUZVdFVmx6M3lXSS9Bb0dCQU1iUTRDNmE0QzJBRUlzTWxWOEcKZW5yaUVFL24vM0g4YWo0UUErV0tKcWVkZEpQWWdXZlJzTHEyUzU4T25aZjdvYmlzWDQyejA4V2tiTU4zNDQ3Mwo4VDN4NHJ1TEVPbnZPM0Y0akg4M1JWZW9kTDBneXZURnlJMHIrMjEvM0Ftb3ZEa0NZN0dQcm0rOTRRQnlYN3VVCmRwdHNGZEFIbE9Ja3lxZlNIR24rNm5PcEFvR0FQWFNuRmxiWTV6MVNRejc0TFFxb012WXd0Mm10UFI4czh5QkUKT3lTTHpUaWtXOGdUT1FzUnB6RHQ5UG5vVjBHWUNuNytaenBVM29lVUxFV3AvRkNTSm5QMzkwWlR4N0hJci9UbgpFL3BLN3UwME1BZ1NlK0pOVnBvcU52dzdyd0tXK3U0VHlBeHB1RWNoK3ZkMnBZak05b0ExLzVwTlpEdTd0bUJlCktxZ1lHOWNDZ1lBOUluTjNSc3pLUmJFYjd3YldQWmtXOFFsQ3BQVXlCWXl1RCtIVWNlTEV2Z25TSXJIOTdkYjAKNTg2WWpOM1NML0lSTUFta1RSYlpGSjNRUFR0UzJkdjMzVW9zL1dJd3ZxcldCcW02d3c4a3pJdXY5TGVXQi9zRAozcjNhN0hFZWJJVUo5a0hZSVNyd0c5KzlpTWQwK2prWkQ5bk5MVndhNGZEdG9aM3RNQVprUGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
	"LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMkpkajl0MkVmRTlVWFEzR1ROM0VPQ3lEeDlKdFEyRS93bWN0VzhUL3FPekJQTjRGCmdjblArVXFhcEpqYWNCbjFaQk9QeFh0MEZGakowQ0JkQzY0cm9ITktBeXdwbEQ3aDBtbmdJRXlQbHk3VGMvY0kKU2hudVh4WlBobTJLVms0NEJWZ1lodHBHYlpmSkY2TkRTZGd1SWpDblFTdUNrRXNZSjdjRjFkcW95V3lEalIvYwo5RWVkUnZuVElKNmFQT21Kd3NRZ0pzVG1qeW16WVNEZjlXZUEvU0dYK3FzME1DTGZxNmNaVTFNdkRmQ0RubEFvClNTNENUQzVYWXAyUmpvak9hWHExb0ZmUmQrc1RZY0pndTFlbjdNdFp2MGg3TWlTUE8rcjRwNmxtTk9Iejg5eTEKVjVGWHBsOCszTG9HT09Od01zRTJWTVgxMmY1b3d2Ly94OVJFZ1FJREFRQUJBb0lCQUFNYlNNZkZyWnpLMW43dgpMNlR5bVZuazZZNzRLYkVKdUF4bHhuVEdncFE5c1JmYVoySFJMelo0SjNlczZaVXFDaWNCVU5LWVRyWHNBQmtJCkhjMkpGZjhiS0RpYmJZMCt5YVptOWx3QVBSOENBTzVzNEtXUGNhZlRmaGlEZ2JSek1zS0EzUGt5TUVocUlPeEIKM3prejdKVjQ5UzB1SHBWTFBuRnpZcFlLcU5rYXVwYVdKOUxLak9wZEpNbmtyRVg5QklNTmJncTdJdUs1by9XMgpSMk1UL0c5aWtJejRjQlB3NjRVRGFVb3hYUFdudzYrMUxXdHdPcTYyaDhlZVlGeFJZTnEwTDdjNk1pcnFEYzZMCjVSZGNzcmFHYWpiK1NGY1NkQjcrS210bitCRGpGOHRqY3lnb1BUM3FGVVdwYjA2cnMyeXhzTERxNzN2VmxxbXcKY2p2WnFFRUNnWUVBOFFtdTB5a1Y0STlCaUQ2MGNzWmsva2JJc3owc2c1KytxVktYd3JVeEhsT243N09EVWZjTwpzMThYSVZVd3N0WGR5N3dVTnpvbmZpWlFpZzRnSCt1cnI1elA4TE12VTJEbTl2bTlxak03UC9HK1gzU1dVeTF4ClkxZmlJckNnQXVkck9Gb3dFWElEbWs4c2IvSWgvL3JwWHIrbDM3NGRpa2R0K2hRcUFRTmdtYVVDZ1lFQTVnazcKQU5Jc1hzaVd3TXU2dUxad1FXTjh3dTJod0IwSExSZTY3UE1KMnFtL1pOMDM4RWdPMzRScE5yMGp6akJBR3lqTwpzc3dnRlZJekxzbU55anJtbXZiZVprL0UreEJyWjJpazhxWWdNdEJDSjZsVnZmczVZZmNGTHQxVXNwZkUrekprCkRKVWErY0lqeDF3OVYrcGR1QU93TkJ1cFpuWHk0bG9idkR4UHNLMENnWUVBNlNySndLRDg5Y2IreUxLSDBvT1MKek50aWFPa2pkNHgvWHNKejVqbHE4NEJQY3pRL00zbi84WXBxRUtlZFBWSmZoU2RDa3c0aGlBbStYVjQrdTBJNgpTZDR5MVJBeEZzSWxpd0taODl3dFU3VWh5S3M2Zytud3h2NEwxaXp3RFA4YW5GKzZJaFlkNEJiNDBLMzFMKy9qCjh2RUhuOElFUjNERHRXZnVIaDdMUXJVQ2dZRUF5aGJiM2huR1h6S3J0ZzZGS0pjbVFWdk1sRmM5bmRBaXFNdkwKTFRWS3QrNGV0ZGJldU5vbEx0cGRzSGd6aDRXK0c5NGEwTnNoYUhuQmUxNFlrY3h6SVRxMklYMzgySEFSVzFTRQpiS1BqYjZDa0xjSEhFTk12RTFCM0hqZlZtOXhYY2pOUHovb0NLOThSbmFmOFFFc21NRzRWRTRJbHJWejdsejJBClZqdEo2elVDZ1lBL2pLY2R0N1JOWlFsRGVMdDI4eTlwalUybFA5dGlZV3UwUlZmU1c4a0RqMktiSnBZR3RnRlUKUURxQk1IQ2JQYlJuaWlzY3JZRUtTM1IrQkY2L1dHUTd6eUxZZTh4dXNLMTdSYy9pWGhaS041Nk81RVFxdHFGagpuNEoxMkhocHAxdnhKQ0JvcDNzeTJFcE1zbUtZa0IvWUxsdXRBWDc1Ymd1Qmp3cDdVUTZRekE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=",
}

var (
	curveOrder = new(big.Int)
)

// Init initializes BLS
func InitSSVBls() {
	_ = bls.Init(bls.BLS12_381)
	_ = bls.SetETHmode(bls.EthModeDraft07)

	curveOrder, _ = curveOrder.SetString(bls.GetCurveOrder(), 10)
}

func TestRsaPubkey(t *testing.T) {
	pb, err := base64.StdEncoding.DecodeString(operatorPubkeys[1])
	require.Nil(t, err)
	fmt.Println(string(pb))
}

// rsa 公钥加密
func TestApplyPubEPriD(t *testing.T) {

	Pubkey := `-----BEGIN RSA PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA+gMmkRzNiNrZ8fglk9qx
JJWmO4XnfVA4TTRX1BiILVnYZImOCHlvpDM+uOx9d0olVkSx5fkiXe5SyrPmDGY4
hjtyUDutXzHHLnkvXnZB7YvetZDjFNlXrpGH525AOJKOo9t3g3v2QTK0EUGMNdRw
1YaFNyTPJM3wXBLYvwMbGQCDai7c6yK0ePkRyBYVq+jnOQrLr4jT+4NI7y85SP0C
Ys708nNNS17KTLEUghNKorGFQpQ4AEALF26ifdiVT81qD9bTV7BTQpiM+psPmABG
HawiecjjHgWnJ8CGAfswtGjh4Ou5GBMKbQRnaykTdII2fEdz1Ye+Swu/TvnPpxVb
YQIDAQAB
-----END RSA PUBLIC KEY-----`

	fmt.Println(Pubkey)
	fmt.Println()

	pb, err := base64.StdEncoding.DecodeString(operatorPubkeys[1])
	require.Nil(t, err)

	pubenctypt, err := cryptor.PublicEncrypt(`hello world`, string(pb))
	require.Nil(t, err)

	fmt.Println(pubenctypt)
}

func TestKeystoreShareV2(t *testing.T) {
	//require.NoError(t, e2types.InitBLS())
	InitSSVBls()

	keystore := `
		{"crypto": {"kdf": {"function": "scrypt", "params": {"dklen": 32, "n": 262144, "r": 8, "p": 1, "salt": "48080dc0e71f291570fa36f2d5f50af4285bb74598620e009eec13fcafbfd742"}, "message": ""}, "checksum": {"function": "sha256", "params": {}, "message": "a9a6a83c6bd1a5a5049cb31d9e098915cd7d4e27b0d0daa5eeaeaec5db4c63bd"}, "cipher": {"function": "aes-128-ctr", "params": {"iv": "4bf906c1d77042766b16e522cb521c4f"}, "message": "5d2ec2eddc4b69e45be978644ab2463b84a5c42731b99eb8c4de958f9bc99630"}}, "description": "", "pubkey": "b875c8d20c575562c13724c84c05e41329d5deb29901d32231e796ed184dacf570857c22fe5c810e4365f84ab201e7e3", "path": "m/12381/3600/0/0/0", "uuid": "23c3659e-d0a7-46f1-a210-ba67767cfd23", "version": 4}	
	`
	pass := "1111aaaa"

	validatorPublicKey := "0xb875c8d20c575562c13724c84c05e41329d5deb29901d32231e796ed184dacf570857c22fe5c810e4365f84ab201e7e3"
	secret, err := keystorev4.DecryptFromJson(keystore, pass)
	require.Nil(t, err)
	version := "v2"

	operators := make([]*Operator, 0, 4)
	operators = append(operators,
		&Operator{
			Id:        784,
			PublicKey: "LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBOXFqdFRtVnhybE5tWEF4cjFWcTIKNUVQWWowNGpGSUdXUytZV3BKK2ozeTlaaWR5aU8xb0N4czUxdUJLSitFUUEzelZTaStCYWEva2QybVdkV3MydApreHZSMzBEWWU5RmpnR21TSW1PMWk3MnlQOUtPVXhXZGhqR2tpeXJId0FHZy9Jd25yZGMvaC9UQi91c0JUOEVoCktXZVoxdEZwbTY4bXhPOXZNQVJNRVg5U3BCeDNkRjV0Z2ttU2RrUWtDK3QzSEF2RjNQR2hrNUQ2cXFjMDA1NkEKcTFuQXk0ZlhGaURjUjU0OEVUZ1ppVWtTTjAwMnZpRXF0eHB6SVFyNnowZWJ2T3BSVFhMRmNzOS9xdlFSU1hDTApDQU9IeUpMQzFjeVRNRmRCczgzM1k2ZXZ0QkpqMVhCM2NoTS9xUUdGdWhiYUVjeFVyY2lsWjZUVXcyS0QxbVJNCmJRSURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K",
			Fee:       463330000000,
		},
		&Operator{
			Id:        785,
			PublicKey: "LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBK2dNbWtSek5pTnJaOGZnbGs5cXgKSkpXbU80WG5mVkE0VFRSWDFCaUlMVm5ZWkltT0NIbHZwRE0rdU94OWQwb2xWa1N4NWZraVhlNVN5clBtREdZNApoanR5VUR1dFh6SEhMbmt2WG5aQjdZdmV0WkRqRk5sWHJwR0g1MjVBT0pLT285dDNnM3YyUVRLMEVVR01OZFJ3CjFZYUZOeVRQSk0zd1hCTFl2d01iR1FDRGFpN2M2eUswZVBrUnlCWVZxK2puT1FyTHI0alQrNE5JN3k4NVNQMEMKWXM3MDhuTk5TMTdLVExFVWdoTktvckdGUXBRNEFFQUxGMjZpZmRpVlQ4MXFEOWJUVjdCVFFwaU0rcHNQbUFCRwpIYXdpZWNqakhnV25KOENHQWZzd3RHamg0T3U1R0JNS2JRUm5heWtUZElJMmZFZHoxWWUrU3d1L1R2blBweFZiCllRSURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K",
			Fee:       462870000000,
		},
		&Operator{
			Id:        786,
			PublicKey: "LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBckxwZXlQcDBrRVJIZGVQbnFxMVAKUXdEZGFBa0E0akRpeU5hMXpMQ1dpb04wQXdRL21xeUxMWWJjcjd6SXFBa3g4ZlZ0aWN5cUVoOWFyTXFlUTZtWgp6OFpZbmlSZXdXZkwrcGhPZ1RoVGhWdHNxNEtlOFFiQ1hsRWovWWplZkRUb0xuT2dhMy9HK2NPMmNraG8vSmZCCnNzSmZmcGxhT2w5OVhhMlcvd1kwWFpkeWswYnZmdTdWT2xlUTZtUUhkVHdOS2kzcGJFcndJTTZEYmhMaHN2S1MKVnJGeVhsNmlaSS9KNmEvNDArMlVhbExSK0haUnVic3ozSENaZ2hHa1NYdG12MFlyaUU0aUZya1BSOGQybGtZRwpXekxwaEZQVVRBL3VFM0lqOFY2M3o4YnpVTS9EdGdPNEFOdG1OZFIyMWNRS3JEdisvQldyRm1hTFltQnZjQnpICjhRSURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K",
			Fee:       41700000000,
		},
		&Operator{
			Id:        705,
			PublicKey: "LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBMkpkajl0MkVmRTlVWFEzR1ROM0UKT0N5RHg5SnRRMkUvd21jdFc4VC9xT3pCUE40RmdjblArVXFhcEpqYWNCbjFaQk9QeFh0MEZGakowQ0JkQzY0cgpvSE5LQXl3cGxEN2gwbW5nSUV5UGx5N1RjL2NJU2hudVh4WlBobTJLVms0NEJWZ1lodHBHYlpmSkY2TkRTZGd1CklqQ25RU3VDa0VzWUo3Y0YxZHFveVd5RGpSL2M5RWVkUnZuVElKNmFQT21Kd3NRZ0pzVG1qeW16WVNEZjlXZUEKL1NHWCtxczBNQ0xmcTZjWlUxTXZEZkNEbmxBb1NTNENUQzVYWXAyUmpvak9hWHExb0ZmUmQrc1RZY0pndTFlbgo3TXRadjBoN01pU1BPK3I0cDZsbU5PSHo4OXkxVjVGWHBsOCszTG9HT09Od01zRTJWTVgxMmY1b3d2Ly94OVJFCmdRSURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K",
			Fee:       417000000000,
		},
	)

	res, err := KeystoreShareV2ForJson(validatorPublicKey, version, "31700000000000000000000", secret, operators)

	fmt.Println("------------- 分片结果 -----------------")
	require.Nil(t, err)

	fmt.Println(res)

	fmt.Println("------------- 分片解密 -----------------")
	var keystoreShareRes KeystoreShareRes

	err = json.Unmarshal([]byte(res), &keystoreShareRes)
	require.Nil(t, err)

	abiSharePrivateKeys := keystoreShareRes.Payload.Readable.AbiSharePrivateKeys

	for i, abiSharePrivateKey := range abiSharePrivateKeys {
		fmt.Println("----------------", i, "-----------------------")

		decodeHex, err := hex.DecodeString(strings.TrimPrefix(abiSharePrivateKey, "0x"))
		require.Nil(t, err)

		abiDecode, err := eth1.AbiDecoderWithReturnedValues([]string{"string"}, decodeHex)
		require.Nil(t, err)
		abiDecodeRes := strings.TrimPrefix(abiDecode[0].(string), "0x")
		fmt.Println("abi decode hex: ", abiDecodeRes)

		operatorSk, err := base64.StdEncoding.DecodeString(operatorSKs[i])
		require.Nil(t, err)

		decryptPriKey, err := cryptor.PriKeyDecrypt(abiDecodeRes, string(operatorSk))
		require.Nil(t, err)

		fmt.Println("share pri key ", i, " :", decryptPriKey)

		//require.Equal(t, encryptedKeys[i], decryptPriKey)
	}

}

func TestSSVRsaOperatorAndShareKey(t *testing.T) {
	//sharePk := "919fddee55eec75095c8bd1e433b048282312086c6ed4bfcaf1e80eeb4127ee03c54c25eed92f42507ce39069e308670"
	shareSk := "0e479c3a9313d23c7675afbd7a285dab6caafba69ae820f9d93837444456a247"

	pk, sk, err := GenerateKeysBase64()
	operatorPkB64, err := base64.StdEncoding.DecodeString(pk)
	operatorSkB64, err := base64.StdEncoding.DecodeString(sk)
	operatorPk := string(operatorPkB64)
	operatorSk := string(operatorSkB64)
	require.Nil(t, err)
	require.NoError(t, err)
	fmt.Println("----------ssv key generate---------")
	fmt.Println("pk:", operatorPk)
	fmt.Println("sk:", operatorSk)

	fmt.Println("----------ssv share key Encrypt---------")
	shareSkEncrypt, err := cryptor.PublicEncrypt(shareSk, operatorPk)
	require.Nil(t, err)
	fmt.Println("sharePkEncrypt", shareSkEncrypt)

	fmt.Println("----------ssv share key Decrypt---------")
	shareSkDecrypt, err := cryptor.PriKeyDecrypt(shareSkEncrypt, operatorSk)
	require.Nil(t, err)
	fmt.Println("sharePkEncrypt", shareSkDecrypt)

	require.Equal(t, shareSk, shareSkDecrypt)
}
